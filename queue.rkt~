#lang racket
(require rnrs/mutable-pairs-6)

(define (make-queue)
  (let ((front-ptr '() )
        (rear-ptr  '() ))
    (define (get-front-ptr) front-ptr)
    (define (get-rear-ptr) rear-ptr)
    (define (empty?) (null? front-ptr))
    (define (insert-queue! e)
      (let ((pair (mcons e '() )))
        (if (empty?) 
            (begin 
              (set! front-ptr pair)
              (set! rear-ptr pair))
            (begin
              (set-mcdr! rear-ptr pair)
              (set! rear-ptr pair)))))
    (define (delete-queue!)
      (if (empty?) (error "the queue is empty")
          (set! front-ptr (mcdr front-ptr))))
    (define (dispatch m)
      (cond ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) delete-queue!)
            ((eq? m 'get-front-ptr) front-ptr)
            ((eq? m 'get-rear-ptr) rear-ptr)
            (else (error "function unknown"))))
    dispatch))

(define (front-ptr z) (z 'get-front-ptr))
(define (rear-ptr z ) (z 'get-rear-ptr))
(define (insert-queue! z e) ((z 'insert-queue!) e))
(define (delete-queue! z) ((z 'delete-queue!)))
(define q1 (make-queue))
(insert-queue! q1 1)
(insert-queue! q1 2)
(insert-queue! q1 3)
(front-ptr q1)
(delete-queue! q1)
(insert-queue! q1 5)
(front-ptr q1)