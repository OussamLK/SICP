#lang racket
;; A deque is queue where you can insert and delete from both sides
;; functions: insert-front, delete-front, insert-rear, delete-rear
(require rnrs/mutable-pairs-6)

(define nil '() )

(define (make-cell)
  (let ((content (mcons nil nil )))
    (let ((head (mcons content nil)))
      (define (get-content) (mcdr content))
      (define (get-right) (mcdr head))
      (define (get-left) (mcar content))
      (define (set-content! c) (set-mcdr! content c))
      (define (set-right! c) (set-mcdr! head c))
      (define (set-left! c) (set-mcar! content c))
      (define (dispatch m)
        (cond ((eq? m 'content ) (get-content))
              ((eq? m 'right ) (get-right))
              ((eq? m 'left ) (get-left))
              ((eq? m 'set-content! ) set-content!)
              ((eq? m 'set-right! ) set-right! )
              ((eq? m 'set-left! ) set-left! )
              (else (error "method unknown"))))
      dispatch)))

(define (make-deque)
  (let ((front-ptr nil)
        (rear-ptr nil))
    (define (empty?) (null? front-ptr))
    (define (get-deque)
      (define (loop head)
       (if (null? head) nil
          (cons (head 'content) (loop (head 'right)))))
      (loop front-ptr))
    (define (insert-front! m)
      (let ((new-cell (make-cell)))
        (if (empty?)
             (begin ((new-cell 'set-content! ) m)
                     (set! front-ptr new-cell)
                     (set! rear-ptr new-cell))
             (begin ((new-cell 'set-content! ) m)
                    ((new-cell 'set-right!) front-ptr) 
                    (set! front-ptr new-cell)))))
    (define (insert-rear! m)
      (let ((new-cell (make-cell)))
        (if (empty?)
             (begin ((new-cell 'set-content! ) m)
                     (set! front-ptr new-cell)
                     (set! rear-ptr new-cell))
             (begin ((new-cell 'set-content! ) m)
                    ((new-cell 'set-left!) rear-ptr)
                    ((rear-ptr 'set-right!) new-cell)
                    (set! rear-ptr new-cell)))))
    (define (dispatch m)
      ;;missing delete front and rear
      (cond ((eq? m 'get-deque) (get-deque))
            ((eq? m 'insert-front!) insert-front!)
            ((eq? m 'insert-rear!) insert-rear!)
            (else (error "unknown function"))))
    dispatch))
                                
(define d1 (make-deque))  
((d1 'insert-front!) 1)
((d1 'insert-front!) 0)
((d1 'insert-front!) -1)
((d1 'insert-rear!) 2)
((d1 'insert-rear!) 3)
(d1 'get-deque)
                 
                                      
                   