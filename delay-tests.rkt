#lang racket
(require racket/promise)
(define (display-multi . strs)
  (if (null? strs)
      'done
      (begin (display (car strs))
             (apply display-multi (cdr strs)))))
(define (stream-cons x ly) (cons x (delay (ly))))
(define (stream-car s) (car s))
(define (stream-cdr s)
  (display-multi "forcing cdr" s "\n")
  (force (cdr s)))
(define (stream-ref s n)
  (if (= n 0) (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))
(define (stream-map proc s)
   (if (null? s) '()
         (stream-cons (proc (stream-car s))
                      (lambda () (stream-map proc (stream-cdr s))))))
(define (list-to-stream lst)
  (if (null? lst) '()
  (stream-cons (car lst) (lambda () (list-to-stream (cdr lst))))))
(define (show x)
  (display x)
  (display "\n")
  x)
(define (stream-filter pred s)
  (cond ((null? s) '())
        ((pred (stream-car s))
               (stream-cons (stream-car s) (lambda () (stream-filter pred (stream-cdr s)))))
        (else (stream-filter pred (stream-cdr s)))))

(define sum 0)
(define (accum n)
  (set! sum (+ n sum))
  n)
(define e20 (list-to-stream '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)))
(define seq (stream-map accum e20))
(define y (stream-filter even? seq))
(define z (stream-filter (lambda (x) (= (remainder x 5) 0)) seq))
(stream-ref y 7)